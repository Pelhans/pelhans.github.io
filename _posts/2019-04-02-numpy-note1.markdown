---
layout:     post
title:      "Numpy 笔记"
subtitle:   "Numpy 常用操作"
date:       2019-04-02 00:15:18
author:     "Pelhans"
header-img: "img/kg_bg.jpg"
header-mask: 0.3 
catalog:    true
tags:
    - Python
---

> 面试过程中发现把知识整理到自己的体系中很重要，本笔记整理 Numpy 部分。

* TOC
{:toc}

# Numpy 基本知识

NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库，主要用于数组计算。

## 安装

最简单的是使用 Pip 安装：

```
python -m pip install --user numpy
```

测试一下：
```
python -c "import numpy as np; print np.__version__"
```

打印出版本就没问题了。

## Ndarray

NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。ndarray 对象是用于存放同类型元素的多维数组。

```
numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)
```

其中：

* object： 数组或嵌套的数列    
* dtype: 数组元素的数据类型，可选    
* copy: 对象是否需要复制，可选    
* order: 创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）    
* subok: 默认返回一个与基类类型一致的数组    
* ndmin: 指定生成数组的最小维度

一般情况下前两个参数是必须有的，其余参数较少使用。如：

```
import numpy as np

np.array([1, 2, 3], dtype=np.int8)
```

### ndarray 的属性

numpy 中比较重要的 ndarray 对象属性有：

* ndarray.ndim: 秩，即轴的数量或维度的数量    
* ndarray.shape: 数组的维度，对于矩阵，n 行 m 列    
* ndarray.size: 数组元素的总个数，相当于 .shape 中 n*m 的值    
* ndarray.dtype: ndarray 对象的元素类型    
* ndarray.itemsize: ndarray 对象中每个元素的大小，以字节为单位    
* ndarray.flags: ndarray 对象的内存信息    
* ndarray.real: ndarray元素的实部    
* ndarray.imag: ndarray 元素的虚部    
* ndarray.data: 包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。

# 创建数组

常用创建数组的方式：

* 从已有数组创建： numpy.asarray(a, dtype = None, order = None)    
* 未初始化数组：numpy.empty(shape, dtype = float, order = 'C')    
* 全0数组：numpy.zeros(shape, dtype = float, order = 'C')    
* 全1数组：numpy.ones(shape, dtype = None, order = 'C')    
* 数值范围数组：numpy.arange(start, stop, step, dtype)    
* 等差序列数组：np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)    
* 等比序列数组:np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)    
* 对角数组：numpy.eye(N, M=None, k=0, dtype=<class 'float'>, order='C')

其中：    
* shape: 数组形状    
* dtype: 数据类型    
* order: 有"C"和"F"两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。    
* start: 起始值，默认为0    
* stop: 终止值（不包含）    
* step: 步长，默认为1    
* dtype: 返回ndarray的数据类型，如果没有提供，则会使用输入数据的类型。    
* num: 要生成的等步长的样本数量，默认为50

## 实例
### numpy.asarray

```
# 后面默认引入 numpy
import numpy as np

x = [1, 2, 3]
a = np.asarray(x)
print a

x =  [(1,2,3),(4,5)] 
a = np.asarray(x, dtype =  float)  
print a
```

### numpy.empty
numpy.empty(shape, dtype = float, order = 'C')

```
# empty 创建的数组未初始化，里面的值是随机的
np.empty([3,2], dtype = int) 

array([[              0,        42832192],
       [140268302237152,         9392928],
       [140268278696400, 140268278694992]])
```

### numpy.zeros
numpy.zeros(shape, dtype = float, order = 'C') 

```
# 这里比较好玩的是 shape 的 (5), (5,), [5] 得到的是一样的
x = np.zeros((5,2), dtype = np.int) 
print(x)
```

### numpy.ones

```
x = np.ones([2,2], dtype = int)
print(x)
```

### numpy.arange

```
x = np.arange(5, dtype =  float)
print x
```

### np.linspace

```
a = np.linspace(10, 20,  5, endpoint =  False)
```

### np.logspace

```
a = np.logspace(1.0,  2.0, num = 10)
```

### numpy.eye

numpy.eye(N, M=None, k=0, dtype=<class 'float'>, order='C')

```
# 正常的方阵对角矩阵
x = np.eye(2, dtype=int)

array([[1, 0],
      [0, 1]])

# 生成非方阵
x = np.eye(2, 3, dtype=int)

array([[1, 0, 0],
       [0, 1, 0]])

# 非主对角线的对角矩阵，通过 k 值进行调整，默认为0
np.eye(3, dtype=int, k=1)

array([[0, 1, 0],
       [0, 0, 1],
       [0, 0, 0]])
```
